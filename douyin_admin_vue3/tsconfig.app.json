{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo", // 增量编译缓存文件路径，提升编译速度
    "target": "ESNext", // 编译目标为最新 ECMAScript 标准（ESNext）
    "jsx": "preserve", // 保留 JSX 语法，用于后续的 Vue 或 React 工具处理
    "lib": [
      "ESNext", // 包含 ESNext 的标准库定义
      "DOM", // 包含浏览器 DOM API 类型定义
      "DOM.Iterable" // 支持 DOM 可迭代对象类型定义
    ],
    "moduleDetection": "force", // 强制模块检测（强制开启模块模式）
    "useDefineForClassFields": true, // 使用 ESNext 的 class 字段定义行为，推荐打开
    "baseUrl": "./", // 基础路径，配合 paths 使用做路径别名解析
    "module": "ESNext", // 输出的模块规范为 ESNext（支持动态 import 等）
    "moduleResolution": "Bundler", // 采用 Bundler 风格的模块解析（适配 Vite、Webpack 等）
    "paths": { // 路径别名配置，方便导入写相对路径
      "@/*": ["src/*"], // @ 代表 src 目录
      "#/*": ["src/types/*"] // # 代表 src/types 目录
    },
    "resolveJsonModule": true, // 允许导入 .json 文件
    "types": [ // 自动引入的类型声明文件（比如第三方库或 Vite 插件）
      "vite/client",
      "vite-plugin-pages/client",
      "vite-plugin-vue-meta-layouts/client",
      "vite-plugin-app-loading/client",
      "element-plus/global"
    ],
    "allowImportingTsExtensions": true, // 允许导入带扩展名的 TypeScript 文件
    "allowJs": false, // 不允许编译 JavaScript 文件
    "strict": true, // 开启所有严格类型检查选项
    "noFallthroughCasesInSwitch": true, // switch 语句中禁止贯穿
    "noUnusedLocals": true, // 报告未使用的局部变量
    "noUnusedParameters": true, // 报告未使用的函数参数
    "noEmit": true, // 不生成编译输出文件，通常用于类型检查
    "sourceMap": true, // 生成源码映射（方便调试）
    "esModuleInterop": true, // 允许默认导入 CommonJS 模块，兼容性更好
    "isolatedModules": true, // 每个文件作为单独模块处理，确保兼容 Babel 等转译器
    "skipLibCheck": true // 跳过库文件的类型检查，提高编译速度
  },
  "include": [
    "src/**/*.ts", // 包含 src 目录下所有 ts 文件
    "src/**/*.d.ts", // 包含声明文件
    "src/**/*.tsx", // 包含 tsx 文件（通常是 React 或 Vue 的 JSX）
    "src/**/*.vue", // 包含 vue 文件（结合 Vue 的类型支持）
    "env.d.ts", // 自定义环境声明文件
    "src/api/video/video.js" // 明确包含某个 JS 文件（即使 allowJs 是 false）
  ]
}
